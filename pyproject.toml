[project]
name = "newversion"
version = "3.1.0"
requires-python = ">=3.9"
description = "PEP 440 version manager"
authors = [{ name = "Vlad Emelianov", email = "vlad.emelianov.nz@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["version", "pep440"]
dependencies = ["packaging>=20.0", "typing_extensions>=4.1.0"]

[project.optional-dependencies]
build = ["setuptools"]

[tool.uv]
dev-dependencies = ["ruff", "pyright", "pytest-cov", "pytest"]
package = true

[project.scripts]
newversion = 'newversion.main:main_cli'

[build-system]
requires = ['setuptools']
build-backend = 'setuptools.build_meta'

[tool.setuptools.packages.find]
where = ["."]
include = ["newversion", "newversion.*"]

[project.urls]
"Documentation" = "https://newversion.readthedocs.io/en/latest/"
"Repository" = "https://github.com/vemel/newversion"
"Issues" = "https://github.com/vemel/newversion/issues"


[tool.coverage.report]
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@overload",
    "if sys.version_info",
]
ignore_errors = true
omit = [".venv/*", "tests/*"]

[tool.pyright]
include = ["newversion"]
exclude = ["**/__pycache__", "tests", "**/build", "typings"]
pythonVersion = "3.9"
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = "error"
reportMissingTypeArgument = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportUnknownParameterType = "error"

[tool.ruff]
exclude = [
    ".eggs",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "build",
    "dist",
]

line-length = 100
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
preview = true
select = [
    "E",    # pycodestyle
    "W",    # pycodestyle
    "F",    # Pyflakes
    "B",    # flake8-bugbear
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "C4",   # flake8-comprehensions
    "C90",  # mccabe
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "T",    # flake8-raise
    "LOG",  # flake8-logging
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "ANN",  # flake8-annotations
    "A",    # flake8-builtins
    "PTH",  # flake8-use-pathlib
    "YTT",  # flake8-2020
    "UP",   # pyupgrade
    "TRY",  # tryceratops
    "PERF", # Perflint
    "FURB", # refurb
    "PL",   # pylint
]
ignore = [
    "D107",    # undocumented-public-init
    "D200",    # fits-on-one-line
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D406",    # new-line-after-section-name
    "D407",    # dashed-underline-after-section
    "D413",    # blank-line-after-last-section
    "PLR0904", # too-many-public-methods
    "PLR0911", # too-many-return-statements
    "PLR0913", # too-many-arguments
    "PLR6201", # literal-membership
]
fixable = ["ALL"]
unfixable = ["B"]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "D",       # missing-docstring
    "S101",    # use-of-assert
    "N803",    # argument-name-does-not-match
    "PLR2004", # constant-comparison
    "PLR6301", # no-self-use
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = false
docstring-code-line-length = "dynamic"
