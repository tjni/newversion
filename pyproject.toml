[tool.poetry]
name = "newversion"
version = "2.0.0"
description = "PEP 440 version manager"
authors = ["Vlad Emelianov <vlad.emelianov.nz@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/vemel/newversion"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["version", "pep440"]
packages = [{ include = "newversion" }]
include = ["LICENSE", "newversion/py.typed"]

[tool.poetry.scripts]
newversion = 'newversion.main:main_cli'

[tool.poetry.urls]
"Documentation" = "https://newversion.readthedocs.io/en/latest/"
"Source" = "https://github.com/vemel/newversion"
"Tracker" = "https://github.com/vemel/newversion/issues"

[tool.poetry.dependencies]
python = ">=3.8.0,<4.0.0"
packaging = ">=20.0"

[tool.poetry.dev-dependencies]
black = { version = "*", python = ">=3.11" }
isort = { version = "*", python = ">=3.11" }
handsdown = { version = "*", python = ">=3.11" }
pytest = { version = "*", python = ">=3.11" }
flake8 = { version = "*", python = ">=3.11" }
pytest-cov = { version = "*", python = ">=3.11" }
twine = { version = "*", python = ">=3.11" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.report]
exclude_lines = [
    "if self.debug:",
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@overload",
    "if sys.version_info",
]
ignore_errors = true
omit = [".venv/*", "tests/*"]

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["newversion", "tests"]
src_paths = []

[tool.black]
line-length = 100
include = '(newversion|tests)/.*\.pyi?$'
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.pyright]
include = ["newversion"]
exclude = ["**/__pycache__", "tests", "**/build", "typings"]
pythonVersion = "3.8"
typeCheckingMode = "strict"
reportMissingImports = "error"
reportMissingTypeStubs = "error"
reportMissingTypeArgument = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportUnknownParameterType = "error"
