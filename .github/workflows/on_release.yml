name: Bump version and release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: Version for publishing
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Get version
        id: version
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            if (context.payload.inputs && context.payload.inputs.version) {
              return context.payload.inputs.version
            }
            return context.ref.split('/').pop()
      - name: Install builder
        run: |
          python -m pip install -U poetry pip wheel
          poetry config virtualenvs.create false
          poetry install -n
      - name: Bump version
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          echo "Bumping version to ${VERSION}"
          poetry version ${VERSION}
          rm -rf *.egg-info || true
          poetry install -n
      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          git config --global user.email "volshebnyi@gmail.com"
          git config --global user.name ${GITHUB_ACTOR}
          git add pyproject.toml
          git add setup.cfg
          git commit -m "Release ${VERSION}"
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git --tags
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:main
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry build
          twine upload  --non-interactive dist/*
