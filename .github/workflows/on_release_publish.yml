name: Create release pull request

on:
  release:
    types: [published]

jobs:
  create-pull-request:
    env:
      BOT_GPG_SIGNING_KEY: ${{ secrets.BOT_GPG_SIGNING_KEY }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Get Release tag
        uses: actions/github-script@v3
        id: tag
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const result = context.payload.release.tag_name
            console.log(result)
            return result
      - name: Get Release body
        uses: actions/github-script@v3
        id: body
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const result = context.payload.release.body
            console.log(result)
            return result
      - name: Get Repository URL
        id: repo
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: return `github.com/${context.payload.repository.full_name}.git`;
      - name: Get target branch
        id: branch
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: return context.payload.release.target_commitish;
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U wheel logchange newversion twine
      - name: Get Release version
        id: version
        env:
          TAG: ${{ steps.tag.outputs.result }}
        run: |
          VERSION=`echo ${TAG} | python -m newversion`
          IS_STABLE=""
          if [[ `echo ${VERSION} | newversion is_stable` ]]; then
            IS_STABLE="true"
          fi
          echo "${VERSION}"
          echo "IS STABLE: ${IS_STABLE}"
          echo "::set-output name=result::${VERSION}"
          echo "::set-output name=is-stable::${IS_STABLE}"
      - name: Update CHANGELOG.md
        env:
          VERSION: ${{ steps.version.outputs.result }}
          IS_STABLE: ${{ steps.version.outputs.is-stable }}
          NOTES: "${{ steps.body.outputs.result }}"
        run: |
          echo "$NOTES" | python -m logchange format > /tmp/notes
          if [[ "${IS_STABLE}" == "true" ]]; then
            python -m logchange set unreleased -i ""
            cat /tmp/notes | python -m logchange add "${VERSION}"
          else
            cat /tmp/notes | python -m logchange set unreleased
          fi
      - name: Bump version
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          echo "$VERSION" | python -m newversion set_package
      - name: Import GPG key
        if: ${{ env.BOT_GPG_SIGNING_KEY != 0 }}
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.BOT_GPG_SIGNING_KEY }}
          git-user-signingkey: true
          git-commit-gpgsign: true
      - name: Create and push release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.result }}
          REPO: ${{ steps.repo.outputs.result }}
        run: |
          git checkout -b release/${VERSION}
          git add pyproject.toml
          git add setup.cfg
          git add setup.py
          git add CHANGELOG.md
          git commit -m "Bump version to ${VERSION}"
          git push --set-upstream origin release/${VERSION}
      - name: Create Release Pull Request
        uses: actions/github-script@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.result }}
          BRANCH: ${{ steps.branch.outputs.result }}
          NOTES: "${{ steps.body.outputs.result }}"
        with:
          script: |
            const response = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `release/${process.env.VERSION}`,
              base: process.env.BRANCH,
              title: `Release ${process.env.VERSION}`,
              body: process.env.NOTES,
            });
            console.log(response);
      - name: Update Release
        uses: actions/github-script@v3
        env:
          IS_STABLE: ${{ steps.version.outputs.is-stable }}
        with:
          script: |
            const response = await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              prerelease: process.env.IS_STABLE !== "true",
            });
            console.log(response)
